---

- name: create directories
  file:
    path: "{{ stage_dir }}"
    state: directory
    owner: "{{ oracle_user.name }}"
    group: "{{ oracle_user.primary_group }}"
    mode: 0755
  with_items: "{{ directories }}"

- name: create oracle home directories
  file:
    path: "{{ oracle_home_dir }}"
    state: directory
    owner: "{{ oracle_user.name }}"
    group: "{{ oracle_user.primary_group }}"
    mode: 0755
  with_items: "{{ directories }}"

- name: create oracle base directories
  file:
    path: "{{ oracle_base_dir }}"
    state: directory
    owner: "{{ oracle_user.name }}"
    group: "{{ oracle_user.primary_group }}"
    mode: 0755
  with_items: "{{ directories }}"

- name: create oracle orainventory directories
  file:
    path: "{{ oracle_inventory_dir }}"
    state: directory
    owner: "{{ oracle_user.name }}"
    group: "{{ oracle_user.primary_group }}"
    mode: 0755
  with_items: "{{ directories }}"

- name: set vars
  set_fact:
    oracle_base: "{{ filesystem_name }}/app/oracle"
    oracle_home: "{{ filesystem_name}}/app/oracle/product/19.3.0.0"

- name: install rpm's
  yum:
    name: "{{ rpm }}"
    state: latest
  register: install_rpms

- name: add primary group {{ oracle_user.primary_group }}
  group:
    name: "{{ oracle_user.primary_group }}"
    state: present
    gid: "{{ oracle_user.primary_group_gid }}"
  register: add_primary_group

- name: verify add primary group {{ oracle_user.primary_group}}
  debug: var=add_primary_group

- name: add secondary group {{ oracle_user.secondary_group }}
  group:
    name: "{{ oracle_user.secondary_group }}"
    state: present
    gid: "{{ oracle_user.secondary_group_gid }}"
  register: add_secondary_group

- name: verify add secondary group {{ oracle_user.secondary_group }}
  debug: var=add_secondary_group

- name: add user oracle user {{ oracle_user.name }}
  user:
    name: "{{ oracle_user.name }}"
    uid: "{{ oracle_user.uid }}"
    group: "{{ oracle_user.primary_group }}"
    groups: "{{ oracle_user.secondary_group }}"
    shell: /bin/bash
    expires: -1
  register: add_oracle_user

- name: verify add user {{ oracle_user.name }}
  debug: var=add_oracle_user

- name: set kernal parameters
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_set: yes
    reload: yes
  with_items: "{{ kernel_parameters }}" 
  register: set_kernel_parameters

- name: verify set kernal parameters
  debug: var=set_kernel_parameters

- name: set {{ oracle_user.name }} user limits
  pam_limits:
    domain: "{{ oracle_user.name }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  with_items: "{{ user_limits }}"
  register: set_user_limits

- name: verify set user limits
  debug: var=set_user_limits

- name: copy files to stage location
  copy:
    src: "{{ item }}"
    dest: "{{ stage_dir }}"
    owner: "{{ oracle_user.name }}"
    group: "{{ oracle_user.primary_group }}"
    mode: 0755
  with_items: "{{ stage_files }}"
  register: copy_files

- name: verify copy files to stage location
  debug: var=copy_files

- name: unzip a file that is already on the remote machine
  become_user: "{{ oracle_user.name }}"
  unarchive:
    src: "{{ oracle_db_software }}"
    dest: "{{ oracle_home }}"
    remote_src: yes

- name: set logfile name
  set_fact:
    logfile: "{{ stage_dir }}/oracle_software_install_{{ ansible_date_time.iso8601_basic_short }}.log"

- name: oracle software installation
  become_user: "{{ oracle_user.name }}"
  shell:
    cmd: |
      echo -e "Start Time\t: `date`" > {{ logfile }} 
      echo -e "Message\t\t: Installing Oracle Software on ORACLE_HOME {{ oracle_home }}...\n" >> {{ logfile }}
      {{ oracle_home }}/runInstaller -silent \
      oracle.install.option=INSTALL_DB_SWONLY \
      UNIX_GROUP_NAME={{ oracle_user.primary_group }} \
      ORACLE_HOME={{ oracle_home }} \
      ORACLE_BASE={{ oracle_base }} \
      oracle.install.db.InstallEdition=EE \
      oracle.install.db.DBA_GROUP={{ oracle_user.primary_group }} \
      oracle.install.db.OSDBA_GROUP={{ oracle_user.primary_group }} \
      oracle.install.db.OSBACKUPDBA_GROUP={{ oracle_user.primary_group }} \
      oracle.install.db.OSDGDBA_GROUP={{ oracle_user.primary_group }} \
      oracle.install.db.OSKMDBA_GROUP={{ oracle_user.primary_group }} \
      oracle.install.db.OSRACDBA_GROUP={{ oracle_user.primary_group }} \
      SECURITY_UPDATES_VIA_MYORACLESUPPORT=false \
      DECLINE_SECURITY_UPDATES=true >> {{ logfile }}
  register: oracle_software_installation
  failed_when: not (oracle_software_installation.rc != 0 or oracle_software_installation.rc != 6)

- name: verify oracle software installation
  debug: var=oracle_software_installation

- name: find root.sh script
  replace:
    path: "{{ logfile }}"
    regexp: "^Execute (.+) on the following nodes:"
  check_mode: yes
  register: find_root_script

- name: verify root.sh script
  debug: var=find_root_script

  
